############################# DATABASE SETUP
DROP DATABASE IF EXISTS XYZCOMPANY;
CREATE DATABASE XYZCOMPANY;
USE XYZCOMPANY;

############################# USER SETUP
DROP USER IF EXISTS 'xyzcompany'@'localhost';
CREATE USER 'xyzcompany'@'localhost' IDENTIFIED BY 'projectcode';
GRANT ALL ON XYZCOMPANY.* TO 'xyzcompany'@'localhost';
FLUSH PRIVILEGES;
COMMIT;


############################# PERSON & DEPARTMENT
CREATE TABLE PERSON (
PERSONAL_ID INT PRIMARY KEY NOT NULL,
FIRST_NAME VARCHAR(30),
LAST_NAME VARCHAR(30),
BIRTH_DATE DATE,
GENDER CHAR(1),
ADDRESS_LINE_1 VARCHAR(50),
ADDRESS_LINE_2 VARCHAR(50),
EMAIL VARCHAR(50),
CITY VARCHAR(30),
STATE VARCHAR(20),
ZIP_CODE VARCHAR(10)
);

CREATE TABLE DEPARTMENT (
DEPARTMENT_ID INT PRIMARY KEY NOT NULL,
DEPARTMENT_NAME VARCHAR(30)
);

############################# EMPLOYEE & AGE CHECK
CREATE TABLE EMPLOYEE (
EMPLOYEE_ID INT PRIMARY KEY NOT NULL,
EMPLOYEE_RANK VARCHAR(30),
EMPLOYEE_TITLE VARCHAR(30),
DEPARTMENT_ID INT,
EMPLOYEE_SUPERVISOR INT,
FOREIGN KEY (EMPLOYEE_ID) REFERENCES PERSON (PERSONAL_ID) ON DELETE CASCADE,
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT (DEPARTMENT_ID) ON DELETE CASCADE,
FOREIGN KEY (EMPLOYEE_SUPERVISOR) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE
);

DELIMITER //
CREATE TRIGGER CHECK_EMPLOYEE_AGE
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    DECLARE AGE INT;
    DECLARE DOB DATE;
    
    SELECT BIRTH_DATE INTO DOB
    FROM PERSON
    WHERE PERSONAL_ID = NEW.EMPLOYEE_ID;
    
    SET AGE = TIMESTAMPDIFF(YEAR, DOB, CURDATE());
    
    IF AGE > 65 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'EMPLOYEE IS OVER 65 YEARS OLD';
    END IF;
END//
DELIMITER ;

############################# CUSTOMER & POTENTIAL EMPLOYEE
CREATE TABLE CUSTOMER (
CUSTOMER_ID INT PRIMARY KEY NOT NULL,
PREFERRED_SALES_REP INT,
FOREIGN KEY (CUSTOMER_ID) REFERENCES PERSON (PERSONAL_ID) ON DELETE CASCADE,
FOREIGN KEY (PREFERRED_SALES_REP) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE
);

CREATE TABLE POTENTIAL_EMPLOYEE (
POTENTIAL_EMPLOYEE_ID INT PRIMARY KEY NOT NULL,
FOREIGN KEY (POTENTIAL_EMPLOYEE_ID) REFERENCES PERSON (PERSONAL_ID) ON DELETE CASCADE
);

DELIMITER //
CREATE TRIGGER CHECK_POTENTIAL_EMPLOYEE_AGE
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    DECLARE AGE INT;
    DECLARE DOB DATE;
    
    SELECT BIRTH_DATE INTO DOB
    FROM PERSON
    WHERE PERSONAL_ID = NEW.EMPLOYEE_ID;
    
    SET AGE = TIMESTAMPDIFF(YEAR, DOB, CURDATE());
    
    IF AGE > 65 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'EMPLOYEE IS OVER 65 YEARS OLD';
    END IF;
END//
DELIMITER ;

############################# SHIFTS & ASSIGNMENTS
CREATE TABLE SHIFT (
EMPLOYEE_ID INT NOT NULL,
DEPARTMENT_ID INT NOT NULL,
SHIFT_START_TIME DATETIME NOT NULL,
SHIFT_END_TIME DATETIME,
PRIMARY KEY (EMPLOYEE_ID, DEPARTMENT_ID, SHIFT_START_TIME),
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE,
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT (DEPARTMENT_ID) ON DELETE CASCADE
);

CREATE TABLE EMPLOYEE_WORKS_AT_DEPARTMENT (
EMPLOYEE_ID INT NOT NULL,
DEPARTMENT_ID INT NOT NULL,
START_DATE DATE NOT NULL,
END_DATE DATE,
PRIMARY KEY (EMPLOYEE_ID, DEPARTMENT_ID, START_DATE),
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE,
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT (DEPARTMENT_ID) ON DELETE CASCADE
);

############################# JOBS
CREATE TABLE JOB (
JOB_ID INT PRIMARY KEY NOT NULL,
JOB_DESCRIPTION VARCHAR(100),
POSTED_DATE DATE,
DEPARTMENT_POST INT,
FOREIGN KEY (DEPARTMENT_POST) REFERENCES DEPARTMENT (DEPARTMENT_ID) ON DELETE CASCADE
);

############################# APPLICANTS & APPLICATIONS
CREATE TABLE APPLICANT (
APPLICANT_ID INT PRIMARY KEY AUTO_INCREMENT,
APPLICANT_CATEGORY ENUM ('EMPLOYEE', 'POTENTIAL_EMPLOYEE') NOT NULL,
EMPLOYEE_ID INT,
POTENTIAL_EMPLOYEE_ID INT,
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE,
FOREIGN KEY (POTENTIAL_EMPLOYEE_ID) REFERENCES POTENTIAL_EMPLOYEE (POTENTIAL_EMPLOYEE_ID) ON DELETE CASCADE,
CHECK (
        (APPLICANT_CATEGORY = 'EMPLOYEE' AND EMPLOYEE_ID IS NOT NULL AND POTENTIAL_EMPLOYEE_ID IS NULL) OR
        (APPLICANT_CATEGORY = 'POTENTIAL_EMPLOYEE' AND POTENTIAL_EMPLOYEE_ID IS NOT NULL AND EMPLOYEE_ID IS NULL)
    )
);

CREATE TABLE APPLIED (
JOB_ID INT,
APPLICANT_ID INT,
PRIMARY KEY (JOB_ID, APPLICANT_ID),
FOREIGN KEY (JOB_ID) REFERENCES JOB (JOB_ID) ON DELETE CASCADE,
FOREIGN KEY (APPLICANT_ID) REFERENCES APPLICANT (APPLICANT_ID) ON DELETE CASCADE
);

############################# INTERVIEW
CREATE TABLE SELECTED_FOR_INTERVIEW (
SELECTED_APPLICANT INT PRIMARY KEY AUTO_INCREMENT,
JOB_ID INT NOT NULL,
APPLICANT_ID INT NOT NULL,
FOREIGN KEY (JOB_ID) REFERENCES APPLIED (JOB_ID) ON DELETE CASCADE,
FOREIGN KEY (APPLICANT_ID) REFERENCES APPLIED (APPLICANT_ID) ON DELETE CASCADE
);

CREATE TABLE INTERVIEWER (
INTERVIEWER_ID INT PRIMARY KEY AUTO_INCREMENT,
EMPLOYEE_ID INT NOT NULL,
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE
);

CREATE TABLE INTERVIEW (
INTERVIEW_ID INT PRIMARY KEY AUTO_INCREMENT,
CANDIDATE_ID INT NOT NULL,
INTERVIEWER_ID INT NOT NULL,
JOB_POSITION INT NOT NULL,
INTERVIEW_TIME DATETIME NOT NULL,
INTERVIEW_ROUND INT NOT NULL,
INTERVIEW_GRADE INT,
FOREIGN KEY (CANDIDATE_ID) REFERENCES SELECTED_FOR_INTERVIEW (SELECTED_APPLICANT) ON DELETE CASCADE,
FOREIGN KEY (INTERVIEWER_ID) REFERENCES INTERVIEWER (INTERVIEWER_ID) ON DELETE CASCADE,
FOREIGN KEY (JOB_POSITION) REFERENCES JOB (JOB_ID) ON DELETE CASCADE,
CHECK (INTERVIEW_GRADE BETWEEN 0 AND 100)
);

############################# PRODUCTS & SITES
CREATE TABLE PRODUCT (
PRODUCT_ID INT PRIMARY KEY NOT NULL,
PRODUCT_TYPE VARCHAR(30),
PRODUCT_SIZE VARCHAR(30),
PRODUCT_LIST_PRICE DECIMAL(10, 2),
PRODUCT_WEIGHT DECIMAL(10, 2),
PRODUCT_STYLE VARCHAR(50)
);

CREATE TABLE MARKETING_SITE (
SITE_ID INT PRIMARY KEY NOT NULL,
SITE_NAME VARCHAR(30),
SITE_LOCATION VARCHAR(100)
);

CREATE TABLE EMPLOYEE_WORKS_FOR_SITE (
EMPLOYEE_ID INT,
SITE_ID INT,
PRIMARY KEY (EMPLOYEE_ID, SITE_ID),
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE,
FOREIGN KEY (SITE_ID) REFERENCES MARKETING_SITE (SITE_ID) ON DELETE CASCADE
);

CREATE TABLE PRODUCT_SOLD_AT_SITE (
PRODUCT_ID INT,
SITE_ID INT,
PRIMARY KEY (PRODUCT_ID, SITE_ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID) ON DELETE CASCADE,
FOREIGN KEY (SITE_ID) REFERENCES MARKETING_SITE (SITE_ID) ON DELETE CASCADE
);

############################# SALESâ”€
CREATE TABLE SALE (
  SALE_ID     INT PRIMARY KEY AUTO_INCREMENT,
  SALESMAN_ID INT,
  CUSTOMER_ID INT,
  PRODUCT_ID  INT,
  SITE_ID     INT,
  SALES_TIME  DATETIME NOT NULL,
  FOREIGN KEY (SALESMAN_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID),
  FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID),
  FOREIGN KEY (PRODUCT_ID, SITE_ID) REFERENCES PRODUCT_SOLD_AT_SITE (PRODUCT_ID, SITE_ID),
  FOREIGN KEY (SALESMAN_ID, SITE_ID) REFERENCES EMPLOYEE_WORKS_FOR_SITE (EMPLOYEE_ID, SITE_ID)
);

CREATE TABLE CUSTOMER_BUYS_SALE (
SALE_ID INT,
CUSTOMER_ID INT,
PRIMARY KEY (SALE_ID, CUSTOMER_ID),
FOREIGN KEY (SALE_ID) REFERENCES SALE (SALE_ID) ON DELETE CASCADE,
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID) ON DELETE CASCADE
);

DELIMITER //
CREATE TRIGGER update_preferred_sales_rep
AFTER INSERT ON SALE
FOR EACH ROW
BEGIN
  UPDATE CUSTOMER c
     SET c.PREFERRED_SALES_REP = (
       SELECT s.SALESMAN_ID
         FROM SALE s
        WHERE s.CUSTOMER_ID = c.CUSTOMER_ID
        GROUP BY s.SALESMAN_ID
        ORDER BY COUNT(*) DESC
        LIMIT 1
     )
   WHERE c.CUSTOMER_ID = NEW.CUSTOMER_ID;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER CHECK_SALE_CONSTRAINTS
BEFORE INSERT ON SALE
FOR EACH ROW
BEGIN
    DECLARE PRODUCT_SOLD_IN_SITE INT;
    DECLARE EMPLOYEE_WORKS_AT_SITE INT;
    
    SELECT COUNT(*) INTO PRODUCT_SOLD_IN_SITE
    FROM PRODUCT_SOLD_AT_SITE
    WHERE PRODUCT_ID = NEW.PRODUCT_ID AND SITE_ID = NEW.SITE_ID;
    
    IF PRODUCT_SOLD_IN_SITE = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'PRODUCT IS NOT SOLD AT THIS SITE';
    END IF;
    
    SELECT COUNT(*) INTO EMPLOYEE_WORKS_AT_SITE
    FROM EMPLOYEE_WORKS_FOR_SITE
    WHERE EMPLOYEE_ID = NEW.SALESMAN_ID AND SITE_ID = NEW.SITE_ID;
    
    IF EMPLOYEE_WORKS_AT_SITE = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'EMPLOYEE DOES NOT WORK AT THIS SITE';
    END IF;
END//
DELIMITER ;

############################# VENDORS, PARTS & SUPPLIERS
CREATE TABLE VENDOR (
VENDOR_ID INT PRIMARY KEY NOT NULL,
VENDOR_NAME VARCHAR(50),
VENDOR_ADDRESS_LINE_1 VARCHAR(50),
VENDOR_ADDRESS_LINE_2 VARCHAR(50),
VENDOR_CITY VARCHAR(30),
VENDOR_STATE VARCHAR(20),
VENDOR_ZIP_CODE VARCHAR(10),
VENDOR_ACCOUNT_NO INT,
VENDOR_CREDIT_RATING INT,
VENDOR_WEBSERVICE_URL VARCHAR(75)
);

CREATE TABLE PART (
PART_ID INT PRIMARY KEY AUTO_INCREMENT,
PART_TYPE VARCHAR(50)
);

CREATE TABLE PART_SUPPLIED_BY_VENDOR (
VENDOR_ID INT,
PART_ID INT,
PART_PRICE DECIMAL(10, 2),
PRIMARY KEY (PART_ID, VENDOR_ID),
FOREIGN KEY (VENDOR_ID) REFERENCES VENDOR (VENDOR_ID) ON DELETE CASCADE,
FOREIGN KEY (PART_ID) REFERENCES PART (PART_ID) ON DELETE CASCADE
);

CREATE TABLE PART_USED_IN_PRODUCT (
PART_ID INT,
PRODUCT_ID INT,
USED_AMOUNT INT,
PRIMARY KEY (PART_ID, PRODUCT_ID),
FOREIGN KEY (PART_ID) REFERENCES PART (PART_ID) ON DELETE CASCADE,
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID) ON DELETE CASCADE
);

############################# SALARY AND PHONE
CREATE TABLE SALARY (
EMPLOYEE_ID INT,
TRANSACTION_NO INT,
PAY_DATE DATE,
PAY_AMOUNT DECIMAL(10, 2),
PRIMARY KEY (EMPLOYEE_ID, TRANSACTION_NO),
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON DELETE CASCADE
);

CREATE TABLE PERSON_PHONE_NO (
PERSONAL_ID INT,
PHONE_NO INT,
PRIMARY KEY (PERSONAL_ID, PHONE_NO),
FOREIGN KEY (PERSONAL_ID) REFERENCES PERSON (PERSONAL_ID) ON DELETE CASCADE
);

############################# VIEW 1
CREATE VIEW View1 AS
SELECT 
  e.EMPLOYEE_ID, CONCAT(p.FIRST_NAME,' ',p.LAST_NAME) AS EMPLOYEE_NAME,
  ROUND( SUM(s.PAY_AMOUNT) / (TIMESTAMPDIFF( MONTH, MIN(s.PAY_DATE), CURDATE() ) + 1), 2) AS AVG_MONTHLY_SALARY
FROM EMPLOYEE e
JOIN PERSON p  ON e.EMPLOYEE_ID = p.PERSONAL_ID
JOIN SALARY s  ON e.EMPLOYEE_ID = s.EMPLOYEE_ID
GROUP BY e.EMPLOYEE_ID;

############################# VIEW 2
DROP VIEW IF EXISTS View2;
CREATE VIEW View2 AS
SELECT sel.SELECTED_APPLICANT AS selected_applicant_id, sel.JOB_ID AS job_id,
  COUNT(*) AS rounds_passed, ROUND(AVG(i.INTERVIEW_GRADE),2) AS avg_grade
FROM SELECTED_FOR_INTERVIEW sel
JOIN INTERVIEW i
  ON sel.SELECTED_APPLICANT = i.CANDIDATE_ID
 AND sel.JOB_ID = i.JOB_POSITION
WHERE i.INTERVIEW_GRADE > 60
GROUP BY
  sel.SELECTED_APPLICANT,
  sel.JOB_ID;

############################# VIEW 2.5
DROP VIEW IF EXISTS Selected_Interviewees;
CREATE VIEW Selected_Interviewees AS
SELECT
  v2.selected_applicant_id,
  v2.job_id,
  v2.rounds_passed,
  v2.avg_grade
FROM View2 v2
WHERE v2.rounds_passed >= 5
  AND v2.avg_grade    > 70;

############################# VIEW 3
CREATE VIEW View3 AS
SELECT p.PRODUCT_TYPE, COUNT(s.SALE_ID) AS ITEMS_SOLD
FROM SALE s
JOIN PRODUCT p
  ON s.PRODUCT_ID = p.PRODUCT_ID
GROUP BY p.PRODUCT_TYPE;

############################# VIEW 4
CREATE VIEW View4 AS
SELECT pup.PRODUCT_ID, ROUND( SUM(pup.USED_AMOUNT * mp.min_price), 2 ) AS TOTAL_PART_COST
FROM PART_USED_IN_PRODUCT pup
JOIN (
  SELECT PART_ID, MIN(PART_PRICE) AS MIN_PRICE
  FROM PART_SUPPLIED_BY_VENDOR
  GROUP BY PART_ID
) AS mp
  ON pup.PART_ID = mp.PART_ID
GROUP BY pup.PRODUCT_ID;


SELECT * FROM PERSON;
SELECT * FROM EMPLOYEE;
SELECT * FROM POTENTIAL_EMPLOYEE;
SELECT * FROM CUSTOMER;
SELECT * FROM DEPARTMENT;
SELECT * FROM SHIFT;
SELECT * FROM EMPLOYEE_WORKS_AT_DEPARTMENT;
SELECT * FROM JOB;
SELECT * FROM APPLICANT;
SELECT * FROM APPLIED;
SELECT * FROM SELECTED_FOR_INTERVIEW;
SELECT * FROM INTERVIEWER;
SELECT * FROM INTERVIEW;
SELECT * FROM PRODUCT;
SELECT * FROM MARKETING_SITE;
SELECT * FROM EMPLOYEE_WORKS_FOR_SITE;
SELECT * FROM PRODUCT_SOLD_AT_SITE;
SELECT * FROM SALE;
SELECT * FROM VENDOR;
SELECT * FROM PART;
SELECT * FROM PART_SUPPLIED_BY_VENDOR;
SELECT * FROM PART_USED_IN_PRODUCT;
SELECT * FROM SALARY;
SELECT * FROM PERSON_PHONE_NO;
SHOW TABLES;

##############################################################################
# QUERIES
############################# 1
SELECT DISTINCT
  IV.INTERVIEWER_ID,
  CONCAT(P.FIRST_NAME,' ',P.LAST_NAME) AS INTERVIEWER_NAME
FROM INTERVIEW I
JOIN INTERVIEWER IV
  ON I.INTERVIEWER_ID = IV.INTERVIEWER_ID
JOIN EMPLOYEE E
  ON IV.EMPLOYEE_ID = E.EMPLOYEE_ID
JOIN PERSON P
  ON E.EMPLOYEE_ID = P.PERSONAL_ID
JOIN SELECTED_FOR_INTERVIEW SEL
  ON I.CANDIDATE_ID = SEL.SELECTED_APPLICANT
JOIN APPLICANT A
  ON SEL.APPLICANT_ID = A.APPLICANT_ID
JOIN PERSON PER2
  ON COALESCE(A.EMPLOYEE_ID, A.POTENTIAL_EMPLOYEE_ID) = PER2.PERSONAL_ID
WHERE PER2.FIRST_NAME = 'HELLEN'
  AND PER2.LAST_NAME  = 'COLE'
  AND SEL.JOB_ID      = 11111
  AND I.JOB_POSITION  = 11111;

############################# 2
SELECT J.JOB_ID
FROM JOB J
JOIN DEPARTMENT D
  ON J.DEPARTMENT_POST = D.DEPARTMENT_ID
WHERE D.DEPARTMENT_NAME = 'MARKETING'
  AND J.POSTED_DATE BETWEEN '2011-01-01' AND '2011-01-31';

############################# 3
SELECT
  E.EMPLOYEE_ID,
  CONCAT(P.FIRST_NAME,' ',P.LAST_NAME) AS EMPLOYEE_NAME
FROM EMPLOYEE E
JOIN PERSON P
  ON E.EMPLOYEE_ID = P.PERSONAL_ID
LEFT JOIN EMPLOYEE SUB
  ON E.EMPLOYEE_ID = SUB.EMPLOYEE_SUPERVISOR
WHERE SUB.EMPLOYEE_ID IS NULL;

############################# 4
SELECT
  MS.SITE_ID,
  MS.SITE_LOCATION
FROM MARKETING_SITE MS
LEFT JOIN SALE S
  ON MS.SITE_ID = S.SITE_ID
 AND S.SALES_TIME BETWEEN '2011-03-01' AND '2011-03-31'
WHERE S.SALE_ID IS NULL;

############################# 5
SELECT
  J.JOB_ID,
  J.JOB_DESCRIPTION
FROM JOB J
LEFT JOIN SELECTED_INTERVIEWEES SI
  ON SI.JOB_ID = J.JOB_ID
 AND DATE(SI.AVG_GRADE) IS NOT NULL
WHERE SI.JOB_ID IS NULL
  AND J.POSTED_DATE <= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);

############################# 6
SELECT
  E.EMPLOYEE_ID,
  CONCAT(P.FIRST_NAME,' ',P.LAST_NAME) AS SALESMAN_NAME
FROM SALE S
JOIN EMPLOYEE E
  ON S.SALESMAN_ID = E.EMPLOYEE_ID
JOIN PERSON P
  ON E.EMPLOYEE_ID = P.PERSONAL_ID
JOIN PRODUCT PR
  ON S.PRODUCT_ID = PR.PRODUCT_ID
WHERE PR.PRODUCT_LIST_PRICE > 200
GROUP BY E.EMPLOYEE_ID
HAVING COUNT(DISTINCT PR.PRODUCT_TYPE)
     = (
        SELECT COUNT(DISTINCT PRODUCT_TYPE)
        FROM PRODUCT
        WHERE PRODUCT_LIST_PRICE > 200
       );

############################# 7
SELECT
  D.DEPARTMENT_ID,
  D.DEPARTMENT_NAME
FROM DEPARTMENT D
LEFT JOIN JOB J
  ON D.DEPARTMENT_ID = J.DEPARTMENT_POST
 AND J.POSTED_DATE BETWEEN '2011-01-01' AND '2011-02-01'
WHERE J.JOB_ID IS NULL;

############################# 8
SELECT
  E.EMPLOYEE_ID,
  CONCAT(P.FIRST_NAME,' ',P.LAST_NAME) AS EMPLOYEE_NAME,
  E.DEPARTMENT_ID
FROM APPLIED AP
JOIN APPLICANT A
  ON AP.APPLICANT_ID = A.APPLICANT_ID
JOIN EMPLOYEE E
  ON A.EMPLOYEE_ID = E.EMPLOYEE_ID
JOIN PERSON P
  ON E.EMPLOYEE_ID = P.PERSONAL_ID
WHERE AP.JOB_ID = 12345;

############################# 9
SELECT PRODUCT_TYPE
FROM VIEW3
ORDER BY ITEMS_SOLD DESC
LIMIT 1;

############################# 10
SELECT
  P.PRODUCT_TYPE,
  ROUND(
    COUNT(S.SALE_ID) * AVG(P.PRODUCT_LIST_PRICE)
    - SUM(IFNULL(V4.TOTAL_PART_COST, 0)),
    2
  ) AS NET_PROFIT
FROM SALE S
JOIN PRODUCT P
  ON S.PRODUCT_ID = P.PRODUCT_ID
LEFT JOIN View4 V4
  ON P.PRODUCT_ID = V4.PRODUCT_ID
GROUP BY
  P.PRODUCT_TYPE
ORDER BY
  NET_PROFIT DESC
LIMIT 1;

############################# 11
SELECT DISTINCT CONCAT(P.FIRST_NAME,' ',P.LAST_NAME) AS INTERVIEWEE_NAME,
                P.EMAIL
FROM SELECTED_INTERVIEWEES SI
JOIN SELECTED_FOR_INTERVIEW SEL
  ON SI.SELECTED_APPLICANT_ID = SEL.SELECTED_APPLICANT
JOIN APPLICANT A
  ON SEL.APPLICANT_ID = A.APPLICANT_ID
JOIN PERSON P
  ON (CASE
        WHEN A.APPLICANT_CATEGORY='EMPLOYEE'
          THEN A.EMPLOYEE_ID
        ELSE A.POTENTIAL_EMPLOYEE_ID
      END) = P.PERSONAL_ID;

############################# 12
SELECT
  E.EMPLOYEE_ID,
  CONCAT(P.FIRST_NAME,' ',P.LAST_NAME) AS EMPLOYEE_NAME
FROM EMPLOYEE E
JOIN PERSON P
  ON E.EMPLOYEE_ID = P.PERSONAL_ID
JOIN EMPLOYEE_WORKS_AT_DEPARTMENT W
  ON E.EMPLOYEE_ID = W.EMPLOYEE_ID
GROUP BY E.EMPLOYEE_ID
HAVING COUNT(DISTINCT W.DEPARTMENT_ID)
     = (SELECT COUNT(*) FROM DEPARTMENT);
     
############################# 13
SELECT 
  CONCAT(p.FIRST_NAME, ' ', p.LAST_NAME) AS interviewee_name,
  ph.PHONE_NO,
  p.EMAIL
FROM APPLICANT a
JOIN PERSON p
  ON (CASE
        WHEN a.APPLICANT_CATEGORY = 'EMPLOYEE' 
          THEN a.EMPLOYEE_ID
        ELSE a.POTENTIAL_EMPLOYEE_ID
      END) = p.PERSONAL_ID
JOIN PERSON_PHONE_NO ph
  ON ph.PERSONAL_ID = p.PERSONAL_ID
WHERE a.APPLICANT_ID IN (
  SELECT ap.APPLICANT_ID
  FROM APPLIED ap
  GROUP BY ap.APPLICANT_ID
  HAVING COUNT(*) = (
    SELECT COUNT(*) 
    FROM SELECTED_FOR_INTERVIEW sel
    WHERE sel.APPLICANT_ID = ap.APPLICANT_ID
  )
);

############################# 14
SELECT EMPLOYEE_ID, EMPLOYEE_NAME, AVG_MONTHLY_SALARY
FROM View1
ORDER BY AVG_MONTHLY_SALARY DESC
LIMIT 1;

############################# 15
SELECT v.VENDOR_ID, v.VENDOR_NAME
FROM VENDOR v
JOIN PART_SUPPLIED_BY_VENDOR ps
  ON v.VENDOR_ID = ps.VENDOR_ID
JOIN PART p
  ON ps.PART_ID = p.PART_ID
JOIN PART_USED_IN_PRODUCT pup
  ON p.PART_ID = pup.PART_ID
JOIN PRODUCT pr
  ON pup.PRODUCT_ID = pr.PRODUCT_ID
WHERE p.PART_TYPE = 'Cup'
  AND pr.PRODUCT_WEIGHT < 4
ORDER BY ps.PART_PRICE
LIMIT 1;
